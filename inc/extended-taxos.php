<?php
/*
Plugin Name:  Extended Taxonomies
Description:  Extended custom taxonomies.
Version:      1.4.2
Author:       John Blackbourn
Author URI:   http://johnblackbourn.com
License:      GPL v2 or later

Copyright Â© 2012 John Blackbourn

Extended Taxonomies provides extended functionality to custom taxonomies in WordPress, allowing you to quickly build custom taxonomies without having to write the same code again and again.

= Improved defaults =

 * Public taxonomy with admin UI enabled
 * Intelligent values for labels and term updated messages
 * Hierarchical
 * Drop with_front from rewrite rules

= Extended features =

 * Custom meta box support
   - Built-in meta boxes for radio buttons, dropdowns and simplified checkboxes
 * Add taxonomies to the 'Right Now' section on the dashboard
 * Allow object terms to be exclusive (partial)
 * Allow or prevent hierarchy within taxonomy (partial)

= License =

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

*/


/**
 * Wrapper function for instantiating a new ExtendedTaxonomy object. This is the only function you need.
 * See the ExtendedTaxonomy class constructor for parameters.
 */
function register_extended_taxonomy( $taxonomy, $object_types, $args = array(), $plural = null, $slug = null, $singular = null ) {
	return new ExtendedTaxonomy( $taxonomy, $object_types, $args, $plural, $slug, $singular );
}

class ExtendedTaxonomy {

	/**
	 * Default arguments for custom taxonomies.
	 * Many of these are different from those found in WordPress' register_taxonomy() function.
	 *
	 * @var array
	 */
	private $defaults = array(
		'public'            => true,
		'show_in_nav_menus' => false,
		'show_ui'           => true,
		'hierarchical'      => true,
		'query_var'         => true,
		'meta_box'          => null,  # Custom arg
		'right_now'         => false, # Custom arg
		'exclusive'         => false, # Custom arg
		'allow_hierarchy'   => false, # Custom arg
		'checked_ontop'     => null,  # Custom arg
	);

	/**
	 * Some other member variables you don't need to worry about:
	 */
	private $taxonomy;
	private $object_types;
	private $tax_slug;
	private $tax_singular;
	private $tax_plural;
	private $tax_singular_low;
	private $tax_plural_low;
	private $args;

	/**
	 * Class constructor.
	 *
	 * The $taxonomy parameter is used as the taxonomy name and to build the taxonomy labels. This means
	 * you can create a taxonomy with just two parameters and all labels and term updated messages will
	 * be generated for you. Example:
	 *
	 * register_extended_taxonomy( 'location', 'post' );
	 *
	 * The plural name for a taxonomy is generated by appending an 's' to $taxonomy. You can override
	 * this with the $plural parameter if necessary. Example:
	 *
	 * register_extended_taxonomy( 'page_category', 'page', array(), 'page_categories' );
	 *
	 * The taxonomy slug is generated from the plural (which is either $taxonomy appended with 's' or
	 * the $plural parameter). This can be overridden with the $slug parameter if necessary. Example:
	 *
	 * register_extended_taxonomy( 'location', 'post', array(), 'locations', 'places' );
	 *
	 * The $args parameter accepts all the standard arguments for register_taxonomy() in addition to
	 * several custom arguments that provide extended functionality:
	 *
	 * - meta_box - string|bool - The name of the custom meta box to use on the post editing screen for
	 * this taxonomy. Three custom meta boxes are provided: 'radio' for a meta box with radio inputs,
	 * 'simple' for a meta box with a simplified list of checkboxes, and 'dropdown' for a meta box with
	 * a dropdown menu. You can also pass the name of a callback function, eg my_super_meta_box(), or
	 * boolean false to remove the meta box. Defaults to null, meaning the standard meta box is used.
	 *
	 * - right_now - boolean - Whether to show this taxonomy on the 'Right Now' section of WordPress'
	 * dashboard. Defaults to false.
	 *
	 * - exclusive - boolean - This parameter isn't feature complete. All it does currently is set the
	 * meta box to the 'radio' meta box, thus meaning any given post can only have one term associated
	 * with it for that taxonomy. I've realised that 'exclusive' isn't the right name for this, as terms
	 * aren't exclusive to a post, but rather each post can exclusively have only one term. It's not
	 * feature complete because you can still edit a post in Quick Edit and give it more than one term
	 * from the taxonomy.
	 *
	 * - allow_hierarchy - boolean - All this does currently is disable hierarchy in the taxonomy's
	 * rewrite rules. Defaults to false.
	 *
	 * @param string $taxonomy The taxonomy name
	 * @param array|string $object_type Name(s) of the object type(s) for the taxonomy
	 * @param array $args The taxonomy arguments (optional)
	 * @param string $plural The taxonomy plural name (optional)
	 * @param string $slug The taxonomy slug (optional)
	 * @return null
	 */
	function __construct( $taxonomy, $object_types, $args = array(), $plural = null, $slug = null, $singular = null ) {

		if ( $singular )
			$this->tax_singular = $singular;
		else
			$this->tax_singular = $taxonomy;

		if ( $slug )
			$this->tax_slug = $slug;
		else if ( $plural )
			$this->tax_slug = $plural;
		else
			$this->tax_slug = $taxonomy . 's';

		if ( $plural )
			$this->tax_plural = $plural;
		else
			$this->tax_plural = $this->tax_slug;

		$this->object_types = (array) $object_types;
		$this->taxonomy     = strtolower( $taxonomy );
		$this->tax_slug     = strtolower( $this->tax_slug );

		# Build our base taxonomy names:
		$this->tax_singular     = ucwords( str_replace( array( '-', '_' ), ' ', $this->tax_singular ) );
		$this->tax_plural       = ucwords( str_replace( array( '-', '_' ), ' ', $this->tax_plural ) );
		$this->tax_singular_low = strtolower( $this->tax_singular );
		$this->tax_plural_low   = strtolower( $this->tax_plural );

		# Build our labels:
		$this->defaults['labels'] = array(
			'menu_name'                  => $this->tax_plural,
			'name'                       => $this->tax_plural,
			'singular_name'              => $this->tax_singular,
			'search_items'               => sprintf( 'Search %s', $this->tax_plural ),
			'popular_items'              => sprintf( 'Popular %s', $this->tax_plural ),
			'all_items'                  => sprintf( 'All %s', $this->tax_plural ),
			'parent_item'                => sprintf( 'Parent %s', $this->tax_singular ),
			'parent_item_colon'          => sprintf( 'Parent %s:', $this->tax_singular ),
			'edit_item'                  => sprintf( 'Edit %s', $this->tax_singular ),
			'view_item'                  => sprintf( 'View %s', $this->tax_singular ),
			'update_item'                => sprintf( 'Update %s', $this->tax_singular ),
			'add_new_item'               => sprintf( 'Add New %s', $this->tax_singular ),
			'new_item_name'              => sprintf( 'New %s Name', $this->tax_singular ),
			'separate_items_with_commas' => sprintf( 'Separate %s with commas', $this->tax_plural_low ),
			'add_or_remove_items'        => sprintf( 'Add or remove %s', $this->tax_plural_low ),
			'choose_from_most_used'      => sprintf( 'Choose from most used %s', $this->tax_plural_low ),
			'no_item'                    => sprintf( 'No %s', $this->tax_singular ) # Custom label

		);

		# 'public' is a meta argument, so set some defaults if it's present:
		if ( isset( $args['public'] ) ) {
			$this->defaults['show_in_nav_menus'] = $args['public'];
			$this->defaults['show_ui']           = $args['public'];
		}

		# Only set rewrites if we need them
		if ( ( isset( $args['public'] ) and !$args['public'] ) or ( !$this->defaults['public'] ) ) {
			$this->defaults['rewrite'] = false;
		} else {
			$this->defaults['rewrite'] = array(
				'slug'         => $this->tax_slug,
				'with_front'   => false,
				'hierarchical' => isset( $args['allow_hierarchy'] ) ? $args['allow_hierarchy'] : $this->defaults['allow_hierarchy']
			);
		}

		# Merge our args with the defaults:
		$this->args = wp_parse_args( $args, $this->defaults );

		# Only set checked on top to true if we're using the default meta box:
		if ( null === $this->args['checked_ontop'] )
			$this->args['checked_ontop'] = ( !$this->args['exclusive'] and !$this->args['meta_box'] );

		# This allows the 'labels' arg to contain some, none or all labels:
		if ( isset( $args['labels'] ) )
			$this->args['labels'] = wp_parse_args( $args['labels'], $this->defaults['labels'] );

		if ( is_admin() ) {

			# Meta boxes:
			if ( $this->args['exclusive'] or isset( $this->args['meta_box'] ) )
				add_action( 'add_meta_boxes', array( $this, 'meta_boxes' ), 10, 2 );

			# 'Right Now' dashboard widget:
			if ( $this->args['right_now'] )
				add_action( 'right_now_content_table_end', array( $this, 'right_now' ) );

			# Term updated messages:
			add_filter( 'term_updated_messages', array( $this, 'term_updated_messages' ), 1, 2 );

		}

		# Register taxonomy when WordPress initialises:
		if ( 'init' === current_filter() )
			call_user_func( array( $this, 'register_taxonomy' ) );
		else
			add_action( 'init', array( $this, 'register_taxonomy' ), 9 );

	}

	/**
	 * Remove the default meta box from the post editing screen and add our custom meta box.
	 *
	 * @param string $post_type The post type
	 * @param object $post The post object
	 * @return null
	 */
	function meta_boxes( $post_type, $post ) {

		if ( !isset( $post->post_type ) )
			return;

		$taxos = get_post_taxonomies( $post );

		if ( in_array( $this->taxonomy, $taxos ) ) {

			$tax = get_taxonomy( $this->taxonomy );

			# Remove default meta box:
			if ( $this->args['hierarchical'] )
				remove_meta_box( "{$this->taxonomy}div", $post_type, 'side' );
			else
				remove_meta_box( "tagsdiv-{$this->taxonomy}", $post_type, 'side' );

			if ( !current_user_can( $tax->cap->assign_terms ) )
				return;

			if ( $this->args['meta_box'] ) {

				# Set the 'meta_box' argument to the actual meta box callback function name:
				if ( 'simple' == $this->args['meta_box'] ) {
					$this->args['meta_box'] = array( $this, 'meta_box_simple' );
				} else if ( 'radio' == $this->args['meta_box'] ) {
					$this->args['exclusive'] = true;
					$this->args['meta_box'] = array( $this, 'meta_box_radio' );
				} else if ( 'dropdown' == $this->args['meta_box'] ) {
					$this->args['exclusive'] = true;
					$this->args['meta_box'] = array( $this, 'meta_box_dropdown' );
				}

				# Add the meta box, using the plural or singular taxonomy label where relevant:
				if ( $this->args['exclusive'] )
					add_meta_box( "{$this->taxonomy}div", $tax->labels->singular_name, $this->args['meta_box'], $post_type, 'side' );
				else
					add_meta_box( "{$this->taxonomy}div", $tax->labels->name, $this->args['meta_box'], $post_type, 'side' );

			} else if ( false !== $this->args['meta_box'] ) {

				# This must be an 'exclusive' taxonomy. Add the radio meta box:
				add_meta_box( "{$this->taxonomy}div", $tax->labels->singular_name, array( $this, 'meta_box_radio' ), $post_type, 'side' );

			}

		}

	}

	/**
	 * Display the 'radio' meta box on the post editing screen.
	 *
	 * Uses the Walker_ExtendedTaxonomyRadios class for the walker.
	 *
	 * @param object $post The post object
	 * @param array $meta_box The meta box arguments
	 * @return null
	 */
	function meta_box_radio( $post, $meta_box ) {

		$walker = new Walker_ExtendedTaxonomyRadios;
		$this->do_meta_box( $post, $walker, true, 'checklist' );

	}

	/**
	 * Display the 'dropdown' meta box on the post editing screen.
	 *
	 * Uses the Walker_ExtendedTaxonomyDropdown class for the walker.
	 *
	 * @param object $post The post object
	 * @param array $meta_box The meta box arguments
	 * @return null
	 */
	function meta_box_dropdown( $post, $meta_box ) {

		$walker = new Walker_ExtendedTaxonomyDropdown;
		$this->do_meta_box( $post, $walker, true, 'dropdown' );

	}

	/**
	 * Display the 'simple' meta box on the post editing screen.
	 *
	 * @param object $post The post object
	 * @param array $meta_box The meta box arguments
	 * @return null
	 */
	function meta_box_simple( $post, $meta_box ) {

		$this->do_meta_box( $post );

	}

	/**
	 * Display a meta box on the post editing screen.
	 *
	 * @param object $post The post object
	 * @param object $walker An optional term walker
	 * @param bool $show_none Whether to include a 'none' item in the term list
	 * @param string $type The taxonomy list type (checklist or dropdown)
	 * @return null
	 */
	function do_meta_box( $post, $walker = null, $show_none = false, $type = 'checklist' ) {

		$taxonomy = $this->taxonomy;
		$tax      = get_taxonomy( $taxonomy );
		$selected = wp_get_object_terms( $post->ID, $taxonomy, array( 'fields' => 'ids' ) );

		if ( $show_none ) {
			if ( isset( $tax->labels->no_item ) )
				$none = $tax->labels->no_item;
			else
				$none = __( 'Not Specified', 'ext_taxos' );
		} else {
			$none = '';
		}

		?>
		<div id="taxonomy-<?php echo $taxonomy; ?>" class="categorydiv">

			<?php
			
			switch ( $type ) {

				case 'dropdown':

					wp_dropdown_categories( array(
						'show_option_none' => $none,
						'hide_empty'       => false,
						'hierarchical'     => true,
						'show_count'       => false,
						'orderby'          => 'name',
						'selected'         => $selected,
						'id'               => "{$taxonomy}dropdown",
						'name'             => "tax_input[{$taxonomy}]",
						'taxonomy'         => $taxonomy,
						'walker'           => $walker
					) );

					break;

				case 'checklist':
				default:

					?>
					<style type="text/css">
						/* Style for the 'none' item: */
						#<?php echo $taxonomy; ?>-0 {
							color: #888;
							border-top: 1px solid #eee;
							margin-top: 5px;
						}
					</style>

					<input type="hidden" name="tax_input[<?php echo $taxonomy; ?>][]" value="0" />

					<ul id="<?php echo $taxonomy; ?>checklist" class="list:<?php echo $taxonomy; ?> categorychecklist form-no-clear">
						<?php

						# Standard WP Walker_Category_Checklist does not cut it
						if ( empty( $walker ) or !is_a( $walker, 'Walker' ) )
							$walker = new Walker_ExtendedTaxonomyCheckboxes;

						# Output the terms:
						wp_terms_checklist( $post->ID, array(
							'taxonomy'      => $taxonomy,
							'walker'        => $walker,
							'selected_cats' => $selected,
							'checked_ontop' => $this->args['checked_ontop']
						) );

						# Output the 'none' item:
						if ( $show_none ) {
							$output = '';
							$o = (object) array(
								'term_id' => 0,
								'name'    => $none,
								'slug'    => 'none'
							);
							if ( empty( $selected ) )
								$_selected = array( 0 );
							else
								$_selected = $selected;
							$args = array(
								'taxonomy'      => $taxonomy,
								'selected_cats' => $_selected,
								'disabled'      => false
							);
							$walker->start_el( $output, $o, 1, $args );
							$walker->end_el( $output, $o, 1, $args );
							echo $output;
						}

						?>

					</ul>

					<?php

					break;

			}

		?>

		</div>
		<?php
	
	}

	/**
	 * Add our taxonomy to the 'Right Now' widget on WordPress' dashboard.
	 *
	 * @return null
	 */
	function right_now() {

		$taxonomy = get_taxonomy( $this->taxonomy );
		$count = wp_count_terms( $this->taxonomy );
		$text  = $this->n( $taxonomy->labels->singular_name, $taxonomy->labels->name, $count );
		$num   = number_format_i18n( $count );

		if ( current_user_can( $taxonomy->cap->manage_terms ) ) {
			$num  = '<a href="edit-tags.php?taxonomy=' . $this->taxonomy . '&amp;post_type=' . reset( $taxonomy->object_type ) . '">' . $num . '</a>';
			$text = '<a href="edit-tags.php?taxonomy=' . $this->taxonomy . '&amp;post_type=' . reset( $taxonomy->object_type ) . '">' . $text . '</a>';
		}

		echo '<tr>';
		echo '<td class="first b b-' . $this->taxonomy . '">' . $num . '</td>';
		echo '<td class="t ' . $this->taxonomy . '">' . $text . '</td>';
		echo '</tr>';

	}

	/**
	 * Add our term updated messages.
	 *
	 * These messages are not yet in WordPress core.
	 * @see http://core.trac.wordpress.org/ticket/18714
	 *
	 * The messages are as follows:
	 *
	 *   1 => "Term added."
	 *   2 => "Term deleted."
	 *   3 => "Term updated."
	 *   4 => "Term not added."
	 *   5 => "Term not updated."
	 *   6 => "Terms deleted."
	 *
	 * @param array $messages An associative array of term updated messages with taxonomy name as keys.
	 * @return array Updated array of term updated messages.
	 */
	function term_updated_messages( $messages ) {

		$messages[$this->taxonomy] = array(
			1 => sprintf( '%s added.', $this->tax_singular ),
			2 => sprintf( '%s deleted.', $this->tax_singular ),
			3 => sprintf( '%s updated.', $this->tax_singular ),
			4 => sprintf( '%s not added.', $this->tax_singular ),
			5 => sprintf( '%s not updated.', $this->tax_singular ),
			6 => sprintf( '%s deleted.', $this->tax_plural )
		);

		return $messages;

	}

	/**
	 * A non-localised version of _n()
	 *
	 * @param string $single The text that will be used if $number is 1
	 * @param string $plural The text that will be used if $number is not 1
	 * @param int $number The number to compare against to use either $single or $plural
	 * @return string Either $single or $plural text
	 */
	public function n( $single, $plural, $number ) {

		return ( 1 == $number ) ? $single : $plural;

	}

	/**
	 * Registers our taxonomy.
	 *
	 * @return null
	 */
	function register_taxonomy() {

		if ( true === $this->args['query_var'] )
			$query_var = $this->taxonomy;
		else
			$query_var = $this->args['query_var'];

		if ( $query_var and count( get_post_types( array( 'query_var' => $query_var ) ) ) )
			trigger_error( sprintf( __( 'Taxonomy query var "%s" clashes with a post type query var of the same name', 'ext_taxos' ), $query_var ), E_USER_ERROR );
		else if ( in_array( $this->taxonomy, array( 'type', 'tab' ) ) )
			trigger_error( sprintf( __( '"%s" is not allowed as a taxonomy name', 'ext_taxos' ), $this->taxonomy ), E_USER_ERROR );
		else
			register_taxonomy( $this->taxonomy, $this->object_types, $this->args );

	}

}

/**
 * Walker to output an unordered list of category checkbox <input> elements properly.
 *
 * @see Walker_Category_Checklist
 * @see Walker
 */
class Walker_ExtendedTaxonomyCheckboxes extends Walker {

	/**
	 * Some member variables you don't need to worry too much about:
	 */
	var $tree_type = 'category';
	var $db_fields = array(
		'parent' => 'parent',
		'id'     => 'term_id'
	);
	var $field = null;

	function __construct( $args = null ) {
		if ( $args and isset( $args['field'] ) )
			$this->field = $args['field'];
	}

	/**
	 * Starts the list before the elements are added.
	 *
	 * @param string $output Passed by reference. Used to append additional content.
	 * @param int $depth Depth of term in reference to parents.
	 * @param array $args Optional arguments.
	 */
	function start_lvl( &$output, $depth = 0, $args = array() ) {
		$indent = str_repeat( "\t", $depth );
		$output .= "$indent<ul class='children'>\n";
	}

	/**
	 * Ends the list of after the elements are added.
	 *
	 * @param string $output Passed by reference. Used to append additional content.
	 * @param int $depth Depth of term in reference to parents.
	 * @param array $args Optional arguments.
	 */
	function end_lvl( &$output, $depth = 0, $args = array() ) {
		$indent = str_repeat( "\t", $depth );
		$output .= "$indent</ul>\n";
	}

	/**
	 * Start the element output.
	 *
	 * @param string $output Passed by reference. Used to append additional content.
	 * @param object $term Term data object.
	 * @param int $depth Depth of term in reference to parents.
	 * @param array $args Optional arguments.
	 * @param unknown $id @TODO
	 */
	function start_el( &$output, $term, $depth, $args, $id = 0 ) {

		$tax = get_taxonomy( $args['taxonomy'] );

		if ( $this->field )
			$value = $term->{$this->field};
		else
			$value = $tax->hierarchical ? $term->term_id : $term->name;

		if ( empty( $term->term_id ) and !$tax->hierarchical )
			$value = '';

		$output .= "\n<li id='{$args['taxonomy']}-{$term->term_id}'>" .
			'<label class="selectit">' .
			'<input value="' . $value . '" type="checkbox" name="tax_input[' . $args['taxonomy'] . '][]" ' .
				'id="in-'.$args['taxonomy'].'-' . $term->term_id . '"' .
				checked( in_array( $term->term_id, (array) $args['selected_cats'] ), true, false ) .
				disabled( empty( $args['disabled'] ), false, false ) .
			' /> ' .
			esc_html( apply_filters( 'the_category', $term->name ) ) .
			'</label>';

	}

	/**
	 * Ends the element output, if needed.
	 *
	 * @param string $output Passed by reference. Used to append additional content.
	 * @param object $term Term data object.
	 * @param int $depth Depth of term in reference to parents.
	 * @param array $args Optional arguments.
	 */
	function end_el( &$output, $term, $depth = 0, $args = array() ) {
		$output .= "</li>\n";
	}

}

/**
 * A term walker class for radio buttons.
 *
 */
class Walker_ExtendedTaxonomyRadios extends Walker {

	/**
	 * Some member variables you don't need to worry too much about:
	 */
	var $tree_type = 'category';
	var $db_fields = array(
		'parent' => 'parent',
		'id'     => 'term_id'
	);
	var $field = null;

	function __construct( $args = null ) {
		if ( $args and isset( $args['field'] ) )
			$this->field = $args['field'];
	}

	/**
	 * Starts the list before the elements are added.
	 *
	 * @param string $output Passed by reference. Used to append additional content.
	 * @param int $depth Depth of term in reference to parents.
	 * @param array $args Optional arguments.
	 */
	function start_lvl( &$output, $depth, $args ) {
		$indent = str_repeat( "\t", $depth );
		$output .= "$indent<ul class='children'>\n";
	}

	/**
	 * Ends the list of after the elements are added.
	 *
	 * @param string $output Passed by reference. Used to append additional content.
	 * @param int $depth Depth of term in reference to parents.
	 * @param array $args Optional arguments.
	 */
	function end_lvl( &$output, $depth, $args ) {
		$indent = str_repeat( "\t", $depth );
		$output .= "$indent</ul>\n";
	}

	/**
	 * Start the element output.
	 *
	 * @param string $output Passed by reference. Used to append additional content.
	 * @param object $term Term data object.
	 * @param int $depth Depth of term in reference to parents.
	 * @param array $args Optional arguments.
	 */
	function start_el( &$output, $term, $depth, $args ) {

		$tax = get_taxonomy( $args['taxonomy'] );

		if ( $this->field )
			$value = $term->{$this->field};
		else
			$value = $tax->hierarchical ? $term->term_id : $term->name;

		if ( empty( $term->term_id ) and !$tax->hierarchical )
			$value = '';

		$output .= "\n<li id='{$args['taxonomy']}-{$term->term_id}'>" .
			'<label class="selectit">' .
			'<input value="' . $value . '" type="radio" name="tax_input[' . $args['taxonomy'] . '][]" ' .
				'id="in-'.$args['taxonomy'].'-' . $term->term_id . '"' .
				checked( in_array( $term->term_id, (array) $args['selected_cats'] ), true, false ) .
				disabled( empty( $args['disabled'] ), false, false ) .
			' /> ' .
			esc_html( apply_filters( 'the_category', $term->name ) ) .
			'</label>';

	}

	/**
	 * Ends the element output, if needed.
	 *
	 * @param string $output Passed by reference. Used to append additional content.
	 * @param object $term Term data object.
	 * @param int $depth Depth of term in reference to parents.
	 * @param array $args Optional arguments.
	 */
	function end_el( &$output, $term, $depth, $args ) {
		$output .= "</li>\n";
	}

}

/**
 * A term walker class for a dropdown menu.
 *
 */
class Walker_ExtendedTaxonomyDropdown extends Walker {

	/**
	 * Some member variables you don't need to worry too much about:
	 */
	var $tree_type = 'category';
	var $db_fields = array(
		'parent' => 'parent',
		'id' => 'term_id'
	);
	var $field = null;

	function __construct( $args = null ) {
		if ( $args and isset( $args['field'] ) )
			$this->field = $args['field'];
	}

	/**
	 * Start the element output.
	 *
	 * @param string $output Passed by reference. Used to append additional content.
	 * @param object $term Term data object.
	 * @param int $depth Depth of term in reference to parents.
	 * @param array $args Optional arguments.
	 */
	function start_el( &$output, $term, $depth, $args ) {

		$pad = str_repeat( '&nbsp;', $depth * 3 );
		$tax = get_taxonomy( $args['taxonomy'] );

		if ( $this->field )
			$value = $term->{$this->field};
		else
			$value = $tax->hierarchical ? $term->term_id : $term->name;

		if ( empty( $term->term_id ) and !$tax->hierarchical )
			$value = '';

		$cat_name = apply_filters( 'list_cats', $term->name, $term );
		$output .= "\t<option class=\"level-$depth\" value=\"".esc_attr($value)."\"";

		if ( isset( $args['selected_cats'] ) and in_array( $value, (array) $args['selected_cats'] ) )
			$output .= ' selected="selected"';
		else if ( isset( $args['selected'] ) and in_array( $term->term_id, (array) $args['selected'] ) )
			$output .= ' selected="selected"';

		$output .= '>';
		$output .= $pad.$cat_name;
		if ( $args['show_count'] )
			$output .= '&nbsp;&nbsp;('. number_format_i18n( $term->count ) .')';
		$output .= "</option>\n";
	}

}

